/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class SampleSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
    }
}

function copy(content) {
    return __awaiter(this, void 0, void 0, function* () {
        yield navigator.clipboard.writeText(content).then(() => new obsidian.Notice("Copied to clipboard"), () => new obsidian.Notice("Could not copy to clipboard"));
    });
}

const DEFAULT_SETTINGS = {
    com: "- ",
    annot: "> ",
    cHead: "#",
    cCom: "%",
    cTask: "?",
    cTag: "!",
    cCat: "+",
    cKey: "=",
};
class MyPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.specialStarts = ["- #", "- %", "- ?", "- !", "- +", "- ="];
        this.splitDropMerge = (line, split) => line.split(split).slice(1).join(split).trim();
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("loading plugin");
            yield this.loadSettings();
            this.addCommand({
                id: "run-formatter",
                name: "Run Formatter on Current Note & Copy to Clipboard",
                editorCallback: (editor) => __awaiter(this, void 0, void 0, function* () {
                    const content = yield this.getSelectionText(editor);
                    this.runFormatter(content);
                }),
            });
            this.addSettingTab(new SampleSettingTab(this.app, this));
        });
    }
    getSelectionText(editor) {
        return __awaiter(this, void 0, void 0, function* () {
            if (editor.somethingSelected()) {
                return editor.getSelection();
            }
            else {
                return editor.getValue();
            }
        });
    }
    lineBeforeI(lines, type, i, before = 0) {
        const copy = [...lines];
        return copy
            .reverse()
            .slice(copy.length - 1 + before - i)
            .find((line) => line.startsWith(type));
    }
    lineAfterI(lines, type, i, after = 0) {
        const copy = [...lines];
        return copy.slice(i + after).find((line) => line.startsWith(type));
    }
    runFormatter(content) {
        return __awaiter(this, void 0, void 0, function* () {
            let output = "";
            const lines = content.split("\n").filter((line) => line.trim() !== "");
            const keywords = [];
            lines.forEach((line, i) => {
                try {
                    const quoteBefore = this.lineBeforeI(lines, "> ", i, 1);
                    if (!this.specialStarts.some((start) => line.startsWith(start)) &&
                        !this.specialStarts.some((start) => lines[i + 1].startsWith(start)) &&
                        (!lines[i - 1] || !lines[i - 1].startsWith("- +"))) {
                        output += line + "\n\n";
                    }
                    // Swap annot and com
                    else if (line.startsWith("- % ")) {
                        const com = this.splitDropMerge(line, "- % ");
                        output += `%%% ${com}\n${quoteBefore}\n\n`;
                    }
                    // Merge disjoint annots
                    else if (line.startsWith("- +")) {
                        const quoteAfter = this.lineAfterI(lines, "> ", i);
                        output += `${quoteBefore} ${this.splitDropMerge(quoteAfter, ">")}\n\n`;
                    }
                    // annot → task
                    else if (line.startsWith("- ?")) {
                        output += `- [ ] ${this.splitDropMerge(quoteBefore, ">")}\n\n`;
                    }
                    // annot → header
                    else if (line.match(/- #+/)) {
                        const headingLevel = line.match(/- (#+)/)[1];
                        output += `${headingLevel} ${this.splitDropMerge(quoteBefore, ">")}\n\n`;
                    }
                    // annot → tag
                    else if (line.startsWith("- !")) {
                        output += `#${this.splitDropMerge(quoteBefore, ">")}\n\n`;
                    }
                    // keywords
                    else if (line.startsWith("- =")) {
                        keywords.push(this.splitDropMerge(quoteBefore, ">"));
                    }
                    //
                    else {
                    }
                }
                catch (e) {
                    console.log({ line, e });
                }
            });
            let result = output;
            if (keywords.length) {
                const outputLines = output.split("\n");
                const keywordFormat = `\nkeywords:: ${keywords.join(", ")}\n`;
                if (outputLines[0] === "---") {
                    const endOfYaml = outputLines.slice(1).findIndex((line) => line === "---") + 2;
                    outputLines.splice(endOfYaml, 0, keywordFormat);
                }
                else {
                    outputLines.splice(0, 0, keywordFormat);
                }
                result = outputLines.join("\n");
            }
            console.log({ result });
            yield copy(result);
        });
    }
    onunload() {
        console.log("unloading plugin");
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
